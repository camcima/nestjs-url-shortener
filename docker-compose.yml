services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: urlshortener
      POSTGRES_USER: urlshortener
      DB_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U urlshortener -d urlshortener"]
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: dev.Dockerfile
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "9464:9464"  # Prometheus metrics
    environment:
      NODE_ENV: development
      REST_API_APP_PORT: 3000
      DB_HOST: ep-bold-breeze-abc-pooler.us-east-2.aws.neon.tech
      DB_USER: urlshortener
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: 5432
      DB_NAME: urlshortener
      TELEMETRY_SERVICE_NAME: url-shortener
      TELEMETRY_PROMETHEUS_PORT: 9464
      TELEMETRY_OTLP_URL: http://localhost:4318/traces
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
    command: >
      sh -c "
        echo 'üîß Starting application initialization...' &&
        echo '‚è≥ Waiting for PostgreSQL to be ready...' &&
        until pg_isready -h $${DB_HOST} -p $${DB_PORT} -U $${DB_USER} -d $${DB_NAME}; do
          echo 'Waiting for PostgreSQL...';
          sleep 2;
        done &&
        echo '‚úÖ PostgreSQL is ready!' &&
        echo 'üîÑ Running database migrations...' &&
        pnpm migrate &&
        echo '‚úÖ Migrations completed!' &&
        echo 'üöÄ Starting NestJS application...' &&
        pnpm rest/start:dev
      "

  opentelemetry-collector:
    restart: unless-stopped
    hostname: opentelemetry-collector
    image: otel/opentelemetry-collector:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./infra/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "9464:9464"   # Prometheus metrics endpoint
  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=otlp-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./infra/prometheus.yaml:/etc/prometheus.yaml
      - ./data/prometheus-data:/prometheus
    ports:
      - "9090:9090"

volumes:
  postgres_data:
